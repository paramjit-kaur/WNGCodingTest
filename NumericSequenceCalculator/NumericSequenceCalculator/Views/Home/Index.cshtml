@model NumericSequenceCalculator.Models.SequenceModel
@section Scripts 
{
    @Scripts.Render("~/bundles/jqueryval")
}
<header>
    <div class="content-wrapper">
        <div class="float-left">
            <p class="site-title">
            </p>
        </div>
    </div>
</header>
<div id="body">
    <section class="featured">
        <div class="content-wrapper">
            @using (Html.BeginForm("NumberResult", "Home"))
            {@Html.ValidationSummary(true)
               <span style="color:red"> <b>@TempData["message"]</b></span><br />
                @Html.ValidationMessageFor(m => m.Number)<br />
                @Html.Label("Enter a Number:")
                @Html.TextBoxFor(m => m.Number)<br />
                <input type="submit" value="Click Here" />
            
                @Html.ActionLink("Reset", "ResetFields")

                
                <section class="content-wrapper main-content clear-fix">
                    @if (Model != null)
                    {
                        @Html.Label("All Numbers:")                       
                        @Html.LabelForModel(GetModifiedString(Model.AllNumberSequence));                                                 
                       
                        <br />
                   
                        @Html.Label("Even Numbers:")
                        @Html.LabelForModel(GetModifiedString(Model.EvenNumberSequence));
                        
                        <br />
                   
                        @Html.Label("Odd Numbers:")
                        @Html.LabelForModel(GetModifiedString(Model.OddNumberSequence));
                        <br />
                    
                        @Html.Label("Fibonacci Numbers:")
                        @Html.LabelForModel(GetModifiedString(Model.FibonacciNumberSequence));

                    }

                    @functions { 
   
                    
                        string GetModifiedString(List<string> sequenceList)//construct the data string
                        {
                            var allNumberString = string.Empty;
                            for (int i = 0; i < sequenceList.Count; i++)//iterating through the list of sequence
                            {
                                if (i < sequenceList.Count - 1)
                                {
                                    allNumberString = allNumberString + string.Format(sequenceList[i] + ", ");//adding commas at the end till (n-1) number
                                }
                                else
                                {
                                    allNumberString = allNumberString + sequenceList[i];
                                }
                            }
                            return allNumberString;
                        }
                    }

                </section>
            }

        </div>
    </section>
    <section class="content-wrapper main-content clear-fix">
    </section>
</div>
